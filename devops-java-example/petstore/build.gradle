plugins {
	id 'java'
	id 'jacoco'
	id 'org.springframework.boot' version '3.1.5'
	id 'io.spring.dependency-management' version '1.1.3'
	id 'com.google.cloud.tools.jib' version '3.4.0'
	id 'org.sonarqube' version '4.4.1.3373'
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
}

sonar {
  properties {
    property "sonar.projectKey", "petstore"
  }
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.2.0'
	implementation 'org.postgresql:postgresql:42.6.0'
	runtimeOnly 'com.h2database:h2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.testcontainers:testcontainers:1.19.1'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

sourceSets {
	integrationTest {
		java {
			compileClasspath += main.output + test.output
			runtimeClasspath += main.output + test.output
			srcDir file('src/test/java')
		}
	}
}

configurations {
	integrationTestCompile.extendsFrom testCompile
	integrationTestRuntime.extendsFrom testRuntime
	integrationTestImplementation.extendsFrom testImplementation
}

tasks.register('integrationTest', Test) {
	// to prevent Mockito's inline mock maker fail on container
	jvmArgs('-Djdk.attach.allowAttachSelf=true', '-XX:+StartAttachListener')

	description = 'Runs integration tests.'
	group = 'verification'
	useJUnitPlatform()
	filter {
		include '**/*IntegrationTest.*'
	}
}

tasks.named('test') {
	filter {
		exclude '**/*IntegrationTest.*'
	}
	// to prevent Mockito's inline mock maker fail on container
	jvmArgs('-Djdk.attach.allowAttachSelf=true', '-XX:+StartAttachListener')
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

tasks.named('bootBuildImage') {
	imageName = 'com.example/hello'
	docker {
		host = "/Users/bhuridech/.rd/docker.sock"
	}
}